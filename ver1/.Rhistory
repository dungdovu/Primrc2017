library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(ggplot2)
# This example uses the ChickWeight dataset, which comes with ggplot2
# First plot
p1 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) +
geom_line() +
ggtitle("Growth curve for individual chicks")
# Second plot
p2 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
# Third plot
p3 <- ggplot(subset(ChickWeight, Time==21), aes(x=weight, colour=Diet)) +
geom_density() +
ggtitle("Final weight, by diet")
# Fourth plot
p4 <- ggplot(subset(ChickWeight, Time==21), aes(x=weight, fill=Diet)) +
geom_histogram(colour="black", binwidth=50) +
facet_grid(Diet ~ .) +
ggtitle("Final weight, by diet") +
theme(legend.position="none")        # No legend (redundant in this graph)
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) +
geom_line() +
ggtitle("Growth curve for individual chicks")
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) +
geom_line() +
ggtitle("Growth curve for individual chicks")
library(GA)
library(MASS)
distance_two_points<- function(lat1,lon1,lat2,lon2)
{
d<- acos( sin(NISTdegTOradian(lat1))*sin(NISTdegTOradian(lat2)) + cos(NISTdegTOradian(lat1))*cos(NISTdegTOradian(lat2))*cos(NISTdegTOradian(lon2)-NISTdegTOradian(lon1)) ) * 6371000
}
#read data from the local and process it
data<-read.csv("trashbin.csv",header=TRUE,row.names=NULL,sep=';')
head(data,5)
data<-data.frame(data)
data$X.1<-NULL
data$X.2<-NULL
names(data)[5]<-paste("lat")
names(data)[6]<-paste("lon")
data$lat<-as.numeric(gsub('\\(', '', data$lat))
data$lon<-as.numeric(gsub('\\)', '', data$lon))
#write.csv(data,"data.csv")
summary(data)
#take the sample of data to get the 80% training data and 20% test data
set.seed(123)
#training and test data
sample <- sample.int(n = nrow(data), size = floor(.8*nrow(data)), replace = F)
train <- data[sample, ]
test  <- data[-sample, ]
head(train,5)
head(test,5)
#test in a certain date 06/16/2014
data_temp<-data[which(substr(data$timestamp,1,10)=="06/16/2014"),]
data_temp_red<-data_temp[which(data_temp$level=="RED"),]
plot(data_temp_red$lat,data_temp_red$lon)
data_temp_red[duplicated(data_temp_red$sn)=='TRUE',]
ggplot(data,aes(data$lat, data$lon))+geom_point()
set.seed(20)
mydata <- cbind(train$lat,train$lon)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
#k=5
dataCluster <- kmeans(train[, 5:6], 5, nstart = 20)
dataCluster
table(dataCluster$cluster)
#install.packages("ggplot2")
library(ggplot2)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(train, aes(train$lat, train$lon, color = dataCluster$cluster)) + geom_point()
Plotcluster<- function(ctl,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT)
}
Plotcluster(1,"06/16/2014","RED","red")
#optimize
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT)
}
Plotcluster(1,"06/16/2014","RED","red")
#optimize
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="cluser %",clt)
}
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="cluser %",sub=clt)
}
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="cluser",title=clt)
}
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="cluster"+ clt)
}
Plotcluster(1,"06/16/2014","RED","red")
#optimize
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main=("cluster"+ clt))
}
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster",sub= clt)
}
Plotcluster(1,"06/16/2014","RED","red")
#optimize
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d" clt)
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d" clt)
}
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d" clt)
}
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d" clt)
}
Plotcluster(1,"06/16/2014","RED","red")
#optimize
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d", clt)
}
#optimize
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main="high level of each bin in cluster %d", clt)
}
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
Plotcluster(1,"06/16/2014","RED","red")
#plot the high level of each bin in the cluster
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
#plot cluser 1
for (in in 1:5)
{
Plotcluster(i,"06/16/2014","RED","red")
}
Plotcluster(2,"06/16/2014","RED","red")
Plotcluster(3,"06/16/2014","RED","red")
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
Plotcluster(3,"06/16/2014","RED","red")
Plotcluster(1,"06/16/2014","RED","red")
dataCluster <- kmeans(train[, 5:6], 5, nstart = 20)
dataCluster
table(dataCluster$cluster)
#install.packages("ggplot2")
library(ggplot2)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(train, aes(train$lat, train$lon, color = dataCluster$cluster)) + geom_point()
#plot the high level of each bin in the cluster
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
dataCluster
dataCluster
table(dataCluster$cluster)
Plotcluster(5,"06/16/2014","RED","red")
Plotcluster(1,"06/16/2014","RED","red")
Plotcluster(2,"06/16/2014","RED","red")
Plotcluster(3,"06/16/2014","RED","red")
Plotcluster(4,"06/16/2014","RED","red")
Plotcluster(5,"06/16/2014","RED","red")
Plotcluster(1,"06/16/2014","RED","red")
library(NISTunits)
data_temp_dup<-cluster8_temp_red[!duplicated(cluster8_temp_red),]
l<-nrow(data_temp_dup)
d1<-matrix(NA, nrow = l, ncol = l)
library(ggplot2)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(train, aes(train$lat, train$lon, color = dataCluster$cluster)) + geom_point()
#plot the high level of each bin in the cluster
cluster8_temp_red<-NULL
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
#plot cluser 1
Plotcluster(1,"06/16/2014","RED","red")
#optimize
Optimizationverhicalroute<- function(cluster8_temp_red) {
#install.packages("NISTunits", dependencies = TRUE)
library(NISTunits)
data_temp_dup<-cluster8_temp_red[!duplicated(cluster8_temp_red),]
l<-nrow(data_temp_dup)
d1<-matrix(NA, nrow = l, ncol = l)
dim(d1)
i<-1
j<-1
for(i in 1:l)
{ for(j in 1:l)
{
d1[i,j]<-distance_two_points(data_temp_dup[i,5],data_temp_dup[i,6],data_temp_dup[j,5],data_temp_dup[j,6])
}
print(i)
}
tourLength <- function(tour, distMatrix) {
tour <- c(tour, tour[1])
route <- embed(tour, 2)[,2:1]
sum(distMatrix[route])
}
D <- as.matrix(d1)
head(D)
tspFitness <- function(tour, ...) 1/tourLength(tour, ...)
GA <- ga(type = "permutation", fitness = tspFitness, distMatrix = D,
min = 1, max = nrow(D), popSize = 50, maxiter = 5000,
run = 500, pmutation = 0.2)
summary(GA)
mds <- cmdscale(D)
x <- mds[, 1]
y <- -mds[, 2]
#plot(x, y, type = "n", asp = 1, xlab = "", ylab = "")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10),
col = "light gray")
tour <- GA@solution[1, ]
tour <- c(tour, tour[1])
n <- length(tour)
#arrows(x[tour[-n]], y[tour[-n]], x[tour[-1]], y[tour[-1]],
#     length = 0.15, angle = 36, col = "steelblue", lwd = 2)
#text(x,y,labels(D[,1]))
tour
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col="red",xlab="longitude",ylab="latitude",pch=19,main="Optimization verhicle route at 06/16/2014")
text(cluster8_temp_red[,5],cluster8_temp_red[,6]+0.001,labels(D[,1]), cex=1.5)
arrows(cluster8_temp_red[tour[-n],5],cluster8_temp_red[tour[-n],6],cluster8_temp_red[tour[-1],5],cluster8_temp_red[tour[-1],6],
length = 0.15, angle = 36, col = "steelblue", lwd = 2)
}
Optimizationverhicalroute(cluster8_temp_red)
ggplot(data,aes(data$lat, data$lon))+geom_point()
set.seed(20)
mydata <- cbind(train$lat,train$lon)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
#k=5
dataCluster <- kmeans(train[, 5:6], 5, nstart = 20)
dataCluster
table(dataCluster$cluster)
#install.packages("ggplot2")
library(ggplot2)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(train, aes(train$lat, train$lon, color = dataCluster$cluster)) + geom_point()
#plot the high level of each bin in the cluster
cluster8_temp_red<-NULL
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
#plot cluser 1
Plotcluster(1,"06/16/2014","RED","red")
#optimize
#install.packages("NISTunits", dependencies = TRUE)
library(NISTunits)
data_temp_dup<-cluster8_temp_red[!duplicated(cluster8_temp_red),]
l<-nrow(data_temp_dup)
d1<-matrix(NA, nrow = l, ncol = l)
dim(d1)
i<-1
j<-1
for(i in 1:l)
{ for(j in 1:l)
{
d1[i,j]<-distance_two_points(data_temp_dup[i,5],data_temp_dup[i,6],data_temp_dup[j,5],data_temp_dup[j,6])
}
print(i)
}
tourLength <- function(tour, distMatrix) {
tour <- c(tour, tour[1])
route <- embed(tour, 2)[,2:1]
sum(distMatrix[route])
}
D <- as.matrix(d1)
head(D)
tspFitness <- function(tour, ...) 1/tourLength(tour, ...)
GA <- ga(type = "permutation", fitness = tspFitness, distMatrix = D,
min = 1, max = nrow(D), popSize = 50, maxiter = 5000,
run = 500, pmutation = 0.2)
summary(GA)
mds <- cmdscale(D)
x <- mds[, 1]
y <- -mds[, 2]
#plot(x, y, type = "n", asp = 1, xlab = "", ylab = "")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10),
col = "light gray")
tour <- GA@solution[1, ]
tour <- c(tour, tour[1])
n <- length(tour)
#arrows(x[tour[-n]], y[tour[-n]], x[tour[-1]], y[tour[-1]],
#     length = 0.15, angle = 36, col = "steelblue", lwd = 2)
#text(x,y,labels(D[,1]))
tour
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col="red",xlab="longitude",ylab="latitude",pch=19,main="Optimization verhicle route at 06/16/2014")
text(cluster8_temp_red[,5],cluster8_temp_red[,6]+0.001,labels(D[,1]), cex=1.5)
arrows(cluster8_temp_red[tour[-n],5],cluster8_temp_red[tour[-n],6],cluster8_temp_red[tour[-1],5],cluster8_temp_red[tour[-1],6],
length = 0.15, angle = 36, col = "steelblue", lwd = 2)
distance_two_points<- function(lat1,lon1,lat2,lon2)
{
d<- acos( sin(NISTdegTOradian(lat1))*sin(NISTdegTOradian(lat2)) + cos(NISTdegTOradian(lat1))*cos(NISTdegTOradian(lat2))*cos(NISTdegTOradian(lon2)-NISTdegTOradian(lon1)) ) * 6371000
}
#read data from the local and process it
data<-read.csv("trashbin.csv",header=TRUE,row.names=NULL,sep=';')
head(data,5)
data<-data.frame(data)
data$X.1<-NULL
data$X.2<-NULL
names(data)[5]<-paste("lat")
names(data)[6]<-paste("lon")
data$lat<-as.numeric(gsub('\\(', '', data$lat))
data$lon<-as.numeric(gsub('\\)', '', data$lon))
#write.csv(data,"data.csv")
summary(data)
#take the sample of data to get the 80% training data and 20% test data
set.seed(123)
#training and test data
sample <- sample.int(n = nrow(data), size = floor(.8*nrow(data)), replace = F)
train <- data[sample, ]
test  <- data[-sample, ]
head(train,5)
head(test,5)
#test in a certain date 06/16/2014
data_temp<-data[which(substr(data$timestamp,1,10)=="06/16/2014"),]
data_temp_red<-data_temp[which(data_temp$level=="RED"),]
plot(data_temp_red$lat,data_temp_red$lon)
data_temp_red[duplicated(data_temp_red$sn)=='TRUE',]
ggplot(data,aes(data$lat, data$lon))+geom_point()
set.seed(20)
mydata <- cbind(train$lat,train$lon)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
#k=5
dataCluster <- kmeans(train[, 5:6], 5, nstart = 20)
dataCluster
table(dataCluster$cluster)
#install.packages("ggplot2")
library(ggplot2)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(train, aes(train$lat, train$lon, color = dataCluster$cluster)) + geom_point()
#plot the high level of each bin in the cluster
Plotcluster<- function(clt,gdate,colorL,colorT){
cluster8<-train[which(dataCluster$cluster==clt),]
#test in a certain date 06/16/2014 and in a certain cluster (cluster 8)
cluster8_temp<-cluster8[which(substr(cluster8$timestamp,1,10)==gdate),]
cluster8_temp_red<-cluster8_temp[which(cluster8_temp$level==colorL),]
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col=colorT,main= clt)
}
#plot cluser 1
Plotcluster(1,"06/16/2014","RED","red")
#optimize
#install.packages("NISTunits", dependencies = TRUE)
library(NISTunits)
data_temp_dup<-cluster8_temp_red[!duplicated(cluster8_temp_red),]
l<-nrow(data_temp_dup)
d1<-matrix(NA, nrow = l, ncol = l)
dim(d1)
i<-1
j<-1
for(i in 1:l)
{ for(j in 1:l)
{
d1[i,j]<-distance_two_points(data_temp_dup[i,5],data_temp_dup[i,6],data_temp_dup[j,5],data_temp_dup[j,6])
}
print(i)
}
tourLength <- function(tour, distMatrix) {
tour <- c(tour, tour[1])
route <- embed(tour, 2)[,2:1]
sum(distMatrix[route])
}
D <- as.matrix(d1)
head(D)
tspFitness <- function(tour, ...) 1/tourLength(tour, ...)
GA <- ga(type = "permutation", fitness = tspFitness, distMatrix = D,
min = 1, max = nrow(D), popSize = 50, maxiter = 5000,
run = 500, pmutation = 0.2)
summary(GA)
mds <- cmdscale(D)
x <- mds[, 1]
y <- -mds[, 2]
#plot(x, y, type = "n", asp = 1, xlab = "", ylab = "")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10),
col = "light gray")
tour <- GA@solution[1, ]
tour <- c(tour, tour[1])
n <- length(tour)
#arrows(x[tour[-n]], y[tour[-n]], x[tour[-1]], y[tour[-1]],
#     length = 0.15, angle = 36, col = "steelblue", lwd = 2)
#text(x,y,labels(D[,1]))
tour
plot(cluster8_temp_red[,5],cluster8_temp_red[,6],col="red",xlab="longitude",ylab="latitude",pch=19,main="Optimization verhicle route at 06/16/2014")
text(cluster8_temp_red[,5],cluster8_temp_red[,6]+0.001,labels(D[,1]), cex=1.5)
arrows(cluster8_temp_red[tour[-n],5],cluster8_temp_red[tour[-n],6],cluster8_temp_red[tour[-1],5],cluster8_temp_red[tour[-1],6],
length = 0.15, angle = 36, col = "steelblue", lwd = 2)
tour
